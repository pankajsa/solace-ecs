AWSTemplateFormatVersion: 2010-09-09
Description: >

  Create the ECS Cluster

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  VPC:
    Description: VPC
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: Subnet of the Cluster
    Type: AWS::EC2::Subnet::Id
  ECSAMI:
    Description: ECS-Optimized AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  InstanceType:
    Description: Instance Type
    Type: String
  SSHLocation:
    Description : The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: "0.0.0.0/0"
    # AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  IamInstanceProfile:
    Description: IAM Instance Profile
    Type: String
  ExternalDiskId:
    Description: EBS Disk
    Type: String
  TargetGroupARN:
    Description: Target Group ARM
    Type: String



Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EnvironmentName

  ECSAutoScalingGroup:
    DependsOn: ECSCluster
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref Subnet
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      TargetGroupARNs: 
        - !Ref TargetGroupARN
      Tags:
        - 
          Key: Name
          PropagateAtLaunch: true
          Value: !Ref EnvironmentName

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      IamInstanceProfile: !Ref IamInstanceProfile
      KeyName:
        Ref: KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          yum -y update
          ECS_CLUSTER=${EnvironmentName}
          region=ap-southeast-1
          #
          # Install Python3 and aws-cli
          yum install -y python37 awscli awslogs jq
          #
          echo ECS_CLUSTER=$ECS_CLUSTER >> /etc/ecs/ecs.config
          INST_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          mv /etc/awslogs/awslogs.conf /etc/awslogs/awslogs.conf.bak
          aws  s3 cp s3://pankaj.setup.solace.com/awslogs.conf /etc/awslogs/.
          # cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
          cluster=$ECS_CLUSTER
          sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
          # container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )
          container_instance_id=$INST_ID
          
          sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf
          sed -i -e "s/region.*/region = ap-southeast-1/g" /etc/awslogs/awscli.conf
          #
          systemctl start awslogsd
          systemctl enable awslogsd.service
          # Mount EBS Volume and also make it part of fstab
          VOL_ID=${ExternalDiskId}
          VOL_STATUS=''
          DEVICE=/dev/xvdh
          export AWS_DEFAULT_REGION=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/[a-z]$//')
          aws ec2 attach-volume --volume-id $VOL_ID --instance-id $INST_ID --device /dev/sdh
          until [ "x$VOL_STATUS" == "xattached" ]; do
              sleep 5
              VOL_STATUS=$(aws ec2 describe-volumes --volume-ids $VOL_ID --query 'Volumes[0].Attachments[0].State' --output text)
              echo $VOL_STATUS
          done
          FILES=$(file -b -s $DEVICE)
          if [ "$FILES" == 'data' ]
          then
              echo Raw device. Creating filesystem...
              mkfs -t ext4 $DEVICE
          else 
              echo Existing Filesystem
          fi
          mkdir /data
          UUID=$(blkid -s UUID -o value /dev/xvdh)
          echo UUID=$UUID /data   ext4    defaults,nofail 0   2 |  tee -a /etc/fstab
          mount -a
          # yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          # yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          # yum install -y aws-cfn-bootstrap hibagent 
          # /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          # /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
          # /usr/bin/enable-ec2-spot-hibernation
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH and 55555 Access to all
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: SSHLocation
        - IpProtocol: tcp
          FromPort: 55555
          ToPort: 55555
          CidrIp:
            Ref: SSHLocation
      Tags:
        - 
            Key: Name
            Value: InstanceSecurityGroup

